diff -up shadow-4.1.5.1/lib/semanage.c.semanage shadow-4.1.5.1/lib/semanage.c
--- shadow-4.1.5.1/lib/semanage.c.semanage	2015-12-17 14:05:47.000000000 +0100
+++ shadow-4.1.5.1/lib/semanage.c	2015-12-17 17:33:22.403220080 +0100
@@ -38,16 +38,47 @@
 #define _GNU_SOURCE
 #endif
 #include <stdio.h>
+#include <sys/wait.h>
+#include <fcntl.h>
 #include <stdarg.h>
 #include <selinux/selinux.h>
 #include <semanage/semanage.h>
 #include "prototypes.h"
+#include "defines.h"
 
+static int safe_system (const char *command,
+                 const char *argv[],
+                 const char *env[],
+                 int ignore_stderr)
+{
+	int status = -1;
+	int fd;
+	pid_t pid;
+	
+	pid = fork();
+	if (pid < 0) {
+		return -1;
+	}
+
+	if (pid) {       /* Parent */
+		if (waitpid (pid, &status, 0) > 0) {
+			return status;
+		} else {
+			return -1;
+		}
+	}
 
-#ifndef DEFAULT_SERANGE
-#define DEFAULT_SERANGE "s0"
-#endif
+	fd = open ("/dev/null", O_RDWR);
+	/* Child */
+	dup2 (fd, 0);	// Close Stdin
+	if (ignore_stderr) {
+		dup2 (fd, 2);	// Close Stderr
+	}
 
+	execve (command, (char *const *) argv, (char *const *) env);
+	fprintf (stderr, _("Failed to exec '%s'\n"), argv[0]);
+	exit (EXIT_FAILURE);
+}
 
 static void semanage_error_callback (unused void *varg,
                                      semanage_handle_t *handle,
@@ -113,12 +144,6 @@ static semanage_handle_t *semanage_init
 		goto fail;
 	}
 
-	ret = semanage_begin_transaction (handle);
-	if (ret != 0) {
-		fprintf (stderr, _("Cannot begin SELinux transaction\n"));
-		goto fail;
-	}
-
 	return handle;
 
 fail:
@@ -127,117 +152,6 @@ fail:
 }
 
 
-static int semanage_user_mod (semanage_handle_t *handle,
-                              semanage_seuser_key_t *key,
-                              const char *login_name,
-                              const char *seuser_name)
-{
-	int ret;
-	semanage_seuser_t *seuser = NULL;
-
-	semanage_seuser_query (handle, key, &seuser);
-	if (NULL == seuser) {
-		fprintf (stderr,
-		         _("Could not query seuser for %s\n"), login_name);
-		ret = 1;
-		goto done;
-	}
-
-#if 0
-	ret = semanage_seuser_set_mlsrange (handle, seuser, DEFAULT_SERANGE);
-	if (ret != 0) {
-		fprintf (stderr,
-		         _("Could not set serange for %s\n"), login_name);
-		ret = 1;
-		goto done;
-	}
-#endif
-
-	ret = semanage_seuser_set_sename (handle, seuser, seuser_name);
-	if (ret != 0) {
-		fprintf (stderr,
-		         _("Could not set sename for %s\n"),
-		         login_name);
-		ret = 1;
-		goto done;
-	}
-
-	ret = semanage_seuser_modify_local (handle, key, seuser);
-	if (ret != 0) {
-		fprintf (stderr,
-		         _("Could not modify login mapping for %s\n"),
-		         login_name);
-		ret = 1;
-		goto done;
-	}
-
-	ret = 0;
-done:
-	semanage_seuser_free (seuser);
-	return ret;
-}
-
-
-static int semanage_user_add (semanage_handle_t *handle,
-                             semanage_seuser_key_t *key,
-                             const char *login_name,
-                             const char *seuser_name)
-{
-	int ret;
-	semanage_seuser_t *seuser = NULL;
-
-	ret = semanage_seuser_create (handle, &seuser);
-	if (ret != 0) {
-		fprintf (stderr,
-		         _("Cannot create SELinux login mapping for %s\n"),
-		         login_name);
-		ret = 1;
-		goto done;
-	}
-
-	ret = semanage_seuser_set_name (handle, seuser, login_name);
-	if (ret != 0) {
-		fprintf (stderr, _("Could not set name for %s\n"), login_name);
-		ret = 1;
-		goto done;
-	}
-
-#if 0
-	ret = semanage_seuser_set_mlsrange (handle, seuser, DEFAULT_SERANGE);
-	if (ret != 0) {
-		fprintf (stderr,
-		         _("Could not set serange for %s\n"),
-		         login_name);
-		ret = 1;
-		goto done;
-	}
-#endif
-
-	ret = semanage_seuser_set_sename (handle, seuser, seuser_name);
-	if (ret != 0) {
-		fprintf (stderr,
-		         _("Could not set SELinux user for %s\n"),
-		         login_name);
-		ret = 1;
-		goto done;
-	}
-
-	ret = semanage_seuser_modify_local (handle, key, seuser);
-	if (ret != 0) {
-		fprintf (stderr,
-		         _("Could not add login mapping for %s\n"),
-		         login_name);
-		ret = 1;
-		goto done;
-	}
-
-	ret = 0;
-done:
-	semanage_seuser_free (seuser);
-	return ret;
-}
-
-
 int set_seuser (const char *login_name, const char *seuser_name)
 {
 	semanage_handle_t *handle = NULL;
@@ -271,17 +185,39 @@ int set_seuser (const char *login_name,
 		goto done;
 	}
 
+	/* Drop libsemanage handles before calling semanage command */
+	semanage_seuser_key_free (key);
+	semanage_handle_destroy (handle);
+	key = NULL;
+	handle = NULL;
+
 	if (0 != seuser_exists) {
-		ret = semanage_user_mod (handle, key, login_name, seuser_name);
-		if (ret != 0) {
+		const char *argv[7];
+
+		argv[0] = "/usr/sbin/semanage";
+		argv[1] = "login";
+		argv[2] = "-m";
+		argv[3] = "-s";
+		argv[4] = seuser_name;
+		argv[5] = login_name;
+		argv[6] = NULL;
+		if (safe_system (argv[0], argv, NULL, 1)) {
 			fprintf (stderr,
 			         _("Cannot modify SELinux user mapping\n"));
 			ret = 1;
 			goto done;
 		}
 	} else {
-		ret = semanage_user_add (handle, key, login_name, seuser_name);
-		if (ret != 0) {
+		const char *argv[7];
+
+		argv[0] = "/usr/sbin/semanage";
+		argv[1] = "login";
+		argv[2] = "-a";
+		argv[3] = "-s";
+		argv[4] = seuser_name;
+		argv[5] = login_name;
+		argv[6] = NULL;
+		if (safe_system (argv[0], argv, NULL, 1)) {
 			fprintf (stderr,
 			         _("Cannot add SELinux user mapping\n"));
 			ret = 1;
@@ -289,13 +225,6 @@ int set_seuser (const char *login_name,
 		}
 	}
 
-	ret = semanage_commit (handle);
-	if (ret < 0) {
-		fprintf (stderr, _("Cannot commit SELinux transaction\n"));
-		ret = 1;
-		goto done;
-	}
-
 	ret = 0;
 
         /* drop obsolete matchpathcon cache */
@@ -310,79 +239,20 @@ done:
 
 int del_seuser (const char *login_name)
 {
-	semanage_handle_t *handle = NULL;
-	semanage_seuser_key_t *key = NULL;
-	int ret;
-	int exists = 0;
+	const char *args[5];
 
-	handle = semanage_init ();
-	if (NULL == handle) {
-		fprintf (stderr, _("Cannot init SELinux management\n"));
-		ret = 1;
-		goto done;
-	}
 
-	ret = semanage_seuser_key_create (handle, login_name, &key);
-	if (ret != 0) {
-		fprintf (stderr, _("Cannot create SELinux user key\n"));
-		ret = 1;
-		goto done;
-	}
-
-	ret = semanage_seuser_exists (handle, key, &exists);
-	if (ret < 0) {
-		fprintf (stderr, _("Cannot verify the SELinux user\n"));
-		ret = 1;
-		goto done;
-	}
-
-	if (0 == exists) {
-		fprintf (stderr,
-		         _("Login mapping for %s is not defined, OK if default mapping was used\n"), 
-		         login_name);
-		ret = 0;  /* probably default mapping */
-		goto done;
-	}
-
-	ret = semanage_seuser_exists_local (handle, key, &exists);
-	if (ret < 0) {
-		fprintf (stderr, _("Cannot verify the SELinux user\n"));
-		ret = 1;
-		goto done;
-	}
-
-	if (0 == exists) {
-		fprintf (stderr,
-		         _("Login mapping for %s is defined in policy, cannot be deleted\n"), 
-		         login_name);
-		ret = 0; /* Login mapping defined in policy can't be deleted */
-		goto done;
-	}
-
-	ret = semanage_seuser_del_local (handle, key);
-	if (ret != 0) {
-		fprintf (stderr,
-		         _("Could not delete login mapping for %s"),
-		         login_name);
-		ret = 1;
-		goto done;
-	}
-
-	ret = semanage_commit (handle);
-	if (ret < 0) {
-		fprintf (stderr, _("Cannot commit SELinux transaction\n"));
-		ret = 1;
-		goto done;
-	}
-
-	ret = 0;
+	args[0] = "/usr/sbin/semanage";
+	args[1] = "login";
+	args[2] = "-d";
+	args[3] = login_name;
+	args[4] = NULL;
+	safe_system (args[0], args, NULL, 1);
 
         /* drop obsolete matchpathcon cache */
         matchpathcon_fini();
 
-done:
-	semanage_handle_destroy (handle);
-	return ret;
+	return 0;
 }
 #else				/* !WITH_SELINUX */
 extern int errno;		/* warning: ANSI C forbids an empty source file */
